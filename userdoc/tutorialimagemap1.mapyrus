# Setup for generating a temporary 300x300 pixel image
#
let tmpPNGFile = tempname("png")
newpage "png", tmpPNGFile, 100, 100, 96
let imageSizeInPixels = Mapyrus.page.width / Mapyrus.page.resolution.mm

# The first time this URL is accessed the area to view is not given.
# So set it to cover the whole dataset.
#
dataset "shapefile", "/tmp/roads.shp", "dbffields="
if x1 eq ""
then
	let x1 = Mapyrus.dataset.min.x
	let y1 = Mapyrus.dataset.min.y
	let x2 = Mapyrus.dataset.max.x
	let y2 = Mapyrus.dataset.max.y
else
	let xDiff = x2 - x1
	let yDiff = y2 - y1

	# Location clicked in imagemap is new centre point of map.
	# Calculate this location in world coordinates.
	#
	let xCentre = x1 + (Mapyrus.imagemap.x / imageSizeInPixels) * xDiff
	let yCentre = y2 - (Mapyrus.imagemap.y / imageSizeInPixels) * yDiff

	# Set new coordinates zoomed 2X to new centre point.
	#
	let x1 = xCentre - xDiff / 4
	let y1 = yCentre - yDiff / 4
	let x2 = xCentre + xDiff / 4
	let y2 = yCentre + yDiff / 4
endif

worlds x1, y1, x2, y2

# Find the world coordinates again, as they have been expanded
# to fill the square image we are drawing to.
#
let x1 = Mapyrus.worlds.min.x
let y1 = Mapyrus.worlds.min.y
let x2 = Mapyrus.worlds.max.x
let y2 = Mapyrus.worlds.max.y

# Read shape file and draw it into image file.
#
import
while Mapyrus.import.more
do
	clearpath
	fetch
	addpath GEOMETRY
	stroke
done

# Send HTML page back to client containing reference to the image we've
# created with URL giving current world coordinates so further zooming can
# be calculated.
#
let url = Mapyrus.filename . '?x1=' . x1 . '&y1=' . y1 . '&x2=' . x2 . '&y2=' . y2
print '&lt;html>'
print '&lt;h1>Header&lt;/h1>&lt;p>'
print '&lt;a href="' . url . '">'
print '&lt;img src="' . tmpPNGFile . '" ismap>'
print '&lt;/a>'

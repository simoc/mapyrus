# @(#) $Id$
#
# Geometric shapes, symbols, line styles and fill patterns  commonly
# used on maps and charts.
#
# There are no restrictions on the use of this file.  Feel free to
# change the size, color or shape or legend description of the symbols
# to suit your purposes.
#
# If you create additional symbols and would like to share them, please
# e-mail a copy to <mapyrus@chenery.id.au> so that they can be added to
# this file.
#
print 'timer=', Mapyrus.timer

begin circle1
	key "point", "circle1"
	linestyle 0.1
	circle 0, 0, 2
	closepath
	stroke
end

begin triangle1
	key "point", "triangle1"
	linestyle 0.1
	move -1, -0.866
	draw 0, 0.866, 1, -0.866
	closepath
	stroke
end

begin square1
	key "point", "square1"
	linestyle 0.1
	box -1, -1, 1, 1
	stroke
end

begin square2
	key "point", "square2"
	linestyle 0.1
	box -1, -1, 1, 1
	fill
end

begin pentagon1
	key "point", "pentagon1"
	linestyle 0.1
	move -1, -1.376
	local i
	let i = 0
	while i < 4
	do
		rdraw 2, 0
		rotate 72
		let i = i + 1
	done
	closepath
	stroke
end

begin hexagon1
	key "point", "hexagon1"
	linestyle 0.1
	move -1, -2
	local i
	let i = 0
	while i < 5
	do
		rdraw 2, 0
		rotate 60
		let i = i + 1
	done
	closepath
	stroke
end

begin octagon1 
	key "point", "octagon1"
	linestyle 0.1
	move -0.848, -0.848
	local i
	let i = 0
	while i < 7
	do
		rdraw 1.656, 0
		rotate 45
		let i = i + 1
	done
	closepath
	stroke
end

begin decagon1 
end

begin x1 
	key "point", "x1"
	linestyle 0.1
	move 1, -1
	draw -1, 1
	move -1, -1
	draw 1, 1
	stroke
end

begin plus1 
	key "point", "plus1"
	linestyle 0.1
	move -1, 0
	draw 1, 0
	move 0, -1
	draw 0, 1
	stroke
end

begin sixpointstar1
end

begin eightpointstar1
end

begin shipwreck
	key "point", "Shipwreck"
	color "black"
	linestyle 0.1
	move 0, 0
	draw -0.7, 1.4

	rdraw 0.8, 0
	rdraw -1.6, 0
	move -0.7, 1.4
	rdraw 0.4, 0.692
	rdraw -0.8, -1.385
	stroke

	clearpath
	move -2, -1
	draw 2, 1, 2, -1
	closepath
	fill
end

begin viewpoint
	key "point", "Viewpoint"
	color "green"
	local i
	let i = 0
	while i < 12
	do
		clearpath
		move 0.5, 0
		draw 2, 0.15, 2.05, 0, 2, -0.15
		closepath
		fill
		rotate 30
		let i = i + 1
	done
end

begin trigstation
	key "point", "Trig. Station"
	color "red"
	linestyle 0.1
	move 0, 0
	draw 0, 2
	move -1, 1
	draw 1, 1
	stroke

	clearpath
	move 0, 0
	draw 1.5, -1.5
	draw -1.5, -1.5
	closepath
	fill
end

#windmill

begin newmoon
	key "point", "New Moon"
	circle 0, 0, 2
	closepath
	color "cyan"
	fill

	clearpath
	move 0, -2
	arc 1, 0, 0, 0, 2
	arc -1, 2, 0, 0, -2
	color "navyblue"
	fill
end

begin trafficlights c
	key "point", "Traffic Lights", "green"
	local y
	color "black"
	box -2, -4, 2, 4
	fill

	clearpath
	circle 0, 0, 1
	circle 0, 2.5, 1
	circle 0, -2.5, 1
	color "grey"
	fill

	# Calculate position for light to show.
	#
	if c eq "red"
	then
		let y = 2.5
	elif c eq "amber"
	then
		let y = 0
	elif c eq "green"
	then
		let y = -2.5
	else
		# Don't draw any light, just
		# show a grey circle again.
		#
		let y = 0
		let c = "grey"
	endif
	color c

	clearpath
	circle 0, y, 1
	fill
end

begin oldmoon
	key "point", "Old Moon"
	circle 0, 0, 2
	closepath
	color "navyblue"
	fill

	clearpath
	move 0, -2
	arc -1, 0, 0, 0, 2
	arc 1, -2, 0, 0, -2
	color "cyan"
	fill
end

begin speechbubble message
	key "point", "Speech Bubble", "speech\nbubble"
	local lines, nLines, i, maxWidth, halfWidth
	let lines = split(message, "\n")
	let nLines = length(lines)

	font "Helvetica-Narrow", 3
	justify "left, bottom"

	# Find the longest line
	#
	let i = 1
	let maxWidth = 0
	while i <= nLines
	do
		let maxWidth = max(maxWidth, stringwidth(lines[i]))
		let i = i + 1
	done
	let halfWidth = maxWidth / 2

	# Draw box with rounded corners.
	#
	move 0, 0
	draw 0, 1
	draw -halfWidth, 1
	arc 1, -halfWidth, 2, -halfWidth - 1, 2
	draw -halfWidth - 1, nLines * 3
	arc 1, -halfWidth, nLines * 3, -halfWidth, nLines * 3 + 1
	draw halfWidth, nLines * 3 + 1
	arc 1, halfWidth, nLines * 3, halfWidth + 1, nLines * 3
	draw halfWidth + 1, 2
	arc 1, halfWidth, 2, halfWidth, 1
	draw 1, 1
	closepath
	color "lightyellow"
	fill
	color "black"
	linestyle 0.1
	stroke

	# Draw each line of message inside bubble.
	#
	let i = 1
	while i <= nLines
	do
		clearpath
		move -halfWidth, 1.5 + (i - 1) * 3
		label lines[nLines - i + 1]
		let i = i + 1
	done
end

begin northarrow
	key "point", "North Arrow"
	linestyle 0.2, "round", "round"
	color "black"
	move 0, -4
	draw 0, 4
	draw -2, 2

	move 0, 4
	draw 2, 2
	stroke

	clearpath
	move 0, 5
	font "Helvetica-Bold", 3
	justify "center"
	label "N"
end

begin nsew_arrow dir
	color "black"
	move 0, 0
	draw 1.5, 1.5, 0, 6
	closepath
	fill

	clearpath
	color "white"
	move 0, 0
	draw -1.5, 1.5, 0, 6
	closepath
	fill
	color "black"
	stroke

	clearpath
	move 0, 8
	rotate -Mapyrus.rotation
	font "Times-Roman", 3
	justify "center, middle"
	label dir
end

begin nsew
	key "point", "NSEW"
	linestyle 0.1
	move 0, 0
	nsew_arrow "N"
	rotate -90
	nsew_arrow "E"
	rotate -90
	nsew_arrow "S"
	rotate -90
	nsew_arrow "W"
end

begin bordercrossing
	key "point", "Border Crossing"
	color "white"
	linestyle 0.4
	circle 0, 0, 1.5
	closepath
	fill
	color "pink"
	move -1.5, 0
	draw 1.5, 0
	stroke
end

begin lighthouse
	key "point", "Lighthouse"
	color "black"
	linestyle 0.1
	move -1.1, 0
	draw 1.1, 0

	box -0.7, 2.1, 0.7, 3

	move 1.4, 2.3
	draw 2.3, 2.1
	move 1.4, 2.8
	draw 2.3, 3

	move -1.4, 2.3
	draw -2.3, 2.1
	move -1.4, 2.8
	draw -2.3, 3
	stroke

	clearpath
	move -0.7, 0
	draw -0.7, 2.1, 0.7, 2.1, 0.7, 0
	closepath
	fill
end

#boatramp
#airport

begin information
	key "point", "Information"
	color "darkgreen"
	circle 0, 0, 2
	fill
	clearpath
	move -0.1, 0.6
	color "white"
	font "Courier-Italic", 4
	justify "center, middle"
	label "i"
end

begin sbahn
	key "point", "S-Bahn Station"
	color "green"
	circle 0, 0, 2
	fill
	clearpath
	move -0.1, 0.6
	color "white"
	font "Helvetica-Bold", 4
	justify "center, middle"
	label "S"
end

begin ubahn
	key "point", "U-bahn Station"
	color "blue"
	box -2, -2, 2, 2
	fill
	clearpath
	move -0.1, 0.6
	color "white"
	font "Helvetica-Bold", 4
	justify "center, middle"
	label "U"
end

begin parking
	key "point", "Parking"
	color "dodgerblue"
	box -2, -2, 2, 2
	fill
	clearpath
	move -0.1, 0.5
	color "white"
	font "Helvetica-Bold", 4
	justify "center, middle"
	label "P"
end

begin coveredparking
	key "point", "Covered Parking"
	color "dodgerblue"
	box -2, -2, 2, 3
	fill
	clearpath
	move -0.1, 0.5
	color "white"
	font "Helvetica-Bold", 4
	justify "center, middle"
	label "P"
	clearpath
	linestyle 0.4
	move -1.7, 1.7
	draw 0, 2.6, 1.7, 1.7
	stroke
end

begin cave
	key "point", "Cave"
	color "darkgray"
	move -2, 0
	draw -1.2, 0, -1.2, 2
	arc 1, 0, 2, 1.2, 2
	draw 1.2, 0, 1.4, 0
	stroke
	clearpath
	box -1.2, 0, -0.7, 2.5
	fill
end

begin flag
	key "point", "Flag"
	color "red"
	box 0, 1.5, 2, 3
	fill
	clearpath
	linestyle 0.2
	move 0, 0
	draw 0, 3
	stroke
end

begin pennant
	key "point", "Pennant"
	color "limegreen"
	move 0, 1.5
	draw 2, 2.25, 0, 3
	fill
	clearpath
	linestyle 0.2
	move 0, 0
	draw 0, 3
	stroke
end

begin tree
	key "point", "Tree"
	color "forestgreen"
	linestyle 0.1
	move -1, 0
	draw 1, 0
	move 0, 0
	draw 0, 1
	stroke
	clearpath
	move -1, 1
	draw 0, 3, 1, 1
	closepath
	fill
end

begin radiotower
	key "point", "Radio Tower"
	linestyle 0.1
	circle 0, 0, 1
	fill
	clearpath
	move 0.707, 0.707
	rdraw 0.5, 1, -1, 0, 0.5, 1
	stroke
end

begin church
	key "point", "Church"
	color "black"
	linestyle 0.1
	circle 0, 0, 1
	fill
	clearpath
	move 0, 1
	draw 0, 3
	move -1, 2
	draw 1, 2
	stroke
end

begin hospital
	key "point", "Hospital"
	color "white"
	linestyle 0.1
	box -2, -2, 2, 2
	fill
	color "black"
	stroke
	color "red"
	clearpath
	box -1.5, -0.4, 1.5, 0.4
	box -0.4, -1.5, 0.4, 1.5
	fill
end

begin tent
	key "point", "Camping"
	linestyle 0.2
	move -1.5, 0
	draw 0, 2.8, 1.5, 0
	closepath
	color "white"
	fill
	color "maroon"
	stroke
	clearpath
	box -0.5, 0, 0.5, 1
	fill
end

begin hut
	key "point", "Hut"
	linestyle 0.1
	color "maroon"
	move -1.3, 0
	draw 1.3, 0
	box -1, 0, 1, 1.5
	stroke
	clearpath
	move -1.3, 1.5
	draw 0, 2.8, 1.3, 1.5
	closepath
	fill
end

begin fairground
	key "point", "Fairground"
	linestyle 0.1
	color "orange"
	move 0, 4
	draw -2, 3.3, 0, 2.6
	closepath
	fill

	color "red"
	clearpath
	box -1, 0, 1, 2
	fill
	clearpath
	move 0, 2
	draw 0, 4
	stroke
end

begin factory
	key "point", "Factory"
	color "black"
	move 0, 0
	draw 2, 0, 2, 1.5, 1.2, 1.5, 0, 3, 0, 1.5, -1.2, 3, -1.2, 0
	closepath
	fill
end

begin school
	key "point", "School"
	color "white"
	box -1, 0, 3, 3
	fill
	clearpath
	color "crimson"
	linestyle 0.1
	box 0, 0, 3, 2
	move 3, 2
	draw 2.5, 3, -0.5, 3, -1, 2, -1, 0, 0, 0
	move 0, 2
	draw -0.5, 3
	box 0.7, 0.7, 1.3, 1.4
	box 1.8, 0.7, 2.4, 1.4
	stroke
end

begin postoffice
	key "point", "Post Office"
	linestyle 0.2
	color "lightyellow"
	box -2, 0, 2, 2
	fill
	color "darkgrey"
	move -2, 2
	draw 0, 0.8, 2, 2
	stroke
end

begin library
	key "point", "Library"
	color "lightblue"
	linestyle 0.1
	move 0, 0
	draw 2, -0.5, 2, 2.5, 0, 3, -2, 2.5, -2, -0.5
	closepath
	fill
	color "black"
	stroke
	move 0, 0
	draw 0, 3
	move 0.5, 2
	draw 1.5, 1.8
	move 0.5, 1.2
	draw 1.5, 1
	stroke
end

begin police
	key "point", "Police"
	box -1, 0, 2, 3
	color "white"
	fill
	color "blue"
	linestyle 0.1
	stroke
	clearpath
	box -1, 0, 0, 1
	box -1, 2, 0, 3
	box 0, 1, 1, 2
	box 1, 0, 2, 1
	box 1, 2, 2, 3
	fill
end

begin cemetary
	key "point", "Cemetary"
	color "saddlebrown"
	clearpath
	box -0.5, -1, 0.5, 3
	fill
	clearpath
	box -1.7, 1.6, 1.7, 2.2
	fill
end

begin waypoint
	key "point", "Waypoint"
	color "white"
	box -2, -2, 2, 2
	fill
	linestyle 0.1
	color "orange"
	stroke
	clearpath
	move -2, 2
	draw 2, -2, 2, 2
	fill
end

begin capitalcity name
	local u, w
	key "point", "Capital City", "Ely"
	font "Helvetica-Bold", 4
	justify "center"
	let u = upper(name)
	let w = stringwidth(u)
	if not protected(-w / 2, 0, w / 2, 4)
	then
		protect -w / 2, 0, w / 2, 4

		# Draw yellow box with black border behind name.
		#
		color "yellow"
		box -w / 2, 0, w / 2, 4
		fill
		color "black"
		linestyle 0.1
		stroke
		clearpath
		move 0, 0.5
		label u
	endif
end

begin city name
	local w
	key "point", "City", "Ely"
	font "Helvetica-Bold", 4
	justify "center"
	let w = stringwidth(name)
	if not protected(-w / 2, 0, w / 2, 4)
	then
		protect -w / 2, 0, w / 2, 4

		# Draw yellow box behind name.
		#
		color "yellow"
		box -w / 2, 0, w / 2, 4
		fill
		color "black"
		clearpath
		move 0, 0.5
		label name
	endif
end

begin town name
	local w
	key "point", "Town", "Ely"
	font "Helvetica-Bold", 3
	justify "center"
	let w = stringwidth(name)
	if not protected(-w / 2, 0, w / 2, 3)
	then
		protect -w / 2, 0, w / 2, 3

		# Draw yellow highlight around name.
		#
		color "yellow"
		move -0.3, 0.5
		move 0.3, 0.5
		move 0, 0.8
		move 0, 0.3
		label name
		clearpath
		color "black"
		move 0, 0.5
		label name
	endif
end

begin emphasisedname name
	local w
	key "point", "Emphasised Name", "HOT"
	font "Helvetica-Bold", 3
	let w = stringwidth(name)
	if not protected(0, 0, w, 3)
	then
		protect 0, 0, w, 3

		# Draw thick red underline under name.
		#
		color "red"
		linestyle 0.6
		move 0, 0
		draw w, 0
		stroke

		clearpath
		color "black"
		move 0, 0.5
		label name
	endif
end

#u-bahn
#camping
#vehicle
#buildings

#roads
begin railway1
end

begin railway2
end

# FILLPATTERNS

begin hatch1
	key "box", "Hatch 1"
	color "red"
	linestyle 0.1
	stroke
	clip "inside"
	stripepath 2, 45
	stroke
end

begin hatch2
	key "box", "Hatch 2"
	color "blue"
	linestyle 0.1
	stroke
	clip "inside"
	stripepath 2, -45
	stroke
end

begin hatch3
	key "box", "Hatch 3"
	color "forestgreen"
	linestyle 0.1
	stroke
	clip "inside"
	stripepath 2, 0
	stroke
end

begin hatch4
	key "box", "Hatch 4"
	color "black"
	linestyle 0.1
	stroke
	clip "inside"
	stripepath 2, 90
	stroke
end

begin crosshatch_lines angle
	# Makes stripes through polygon.  Used for cross-hatching
	# so that original path is saved in calling function
	# and can be re-used for second set of hatch lines.
	#
	stripepath 2, angle
	stroke
end

begin crosshatch
	key "box", "Crosshatch"
	color "orange"
	linestyle 0.1
	stroke
	clip "inside"
	stroke
	crosshatch_lines 45
	crosshatch_lines -45
end

begin mesh
	key "box", "Mesh"
	color "darkgray"
	linestyle 0.1
	stroke
	clip "inside"
	stroke
	crosshatch_lines 0
	crosshatch_lines 90
end

begin doublestripefill
	key "box", "Double Stripes"
	color "blue"
	fill
	clip "inside"
	color "yellow"
	linestyle 1
	stripepath 2, 45
	stroke
end

begin triplestripefill
	key "box", "Triple Stripes"
	color "white"
	fill
	clip "inside"
	stripepath 5, 45
	color "lightpink"
	linestyle 3
	stroke
	color "deeppink"
	linestyle 1
	stroke
end

begin halffill_box c1, c2, c3, c4
	# Draw a square with the 4 quadrants in different colors.
	#
	box -1, -1, 0, 0
	color c1
	fill

	clearpath
	box -1, 0, 0, 1
	color c2
	fill

	clearpath
	box 0, -1, 1, 0
	color c3
	fill

	clearpath
	box 0, 0, 1, 1
	color c4
	fill
end

begin halffill
	key "box", "Half Fill"
	clip "inside"
	stripepath 2, 0
	samplepath 2, 0
	halffill_box "beige", "brown", "brown", "beige"
end

begin quiltfill
	key "box", "Quilt Fill"
	clip "inside"
	stripepath 2, 0
	samplepath 2, 0
	halffill_box "red", "yellow", "purple", "orange"
end

begin circlefill_circle
	circle 0, 0, 2
	fill
end

begin circlefill
	key "box", "Circle Fill"
	color "white"
	fill
	clip "inside"
	color "dodgerblue"
	stripepath 5, 0
	samplepath 5, 0
	circlefill_circle
end

begin boxfill_box
	box -1, -1, 1, 1
	fill
end

begin boxfill
	key "box", "Box Fill"
	color "white"
	fill
	clip "inside"
	color "lightpink"
	stripepath 4, 0
	samplepath 4, 0
	boxfill_box
end

begin repeaticon hexdigits, iconsize
	# Repeats an icon all through a polygon in
	# a tiling pattern.
	#
	clip "inside"
	stripepath iconsize, 0
	samplepath iconsize, 0
	icon hexdigits, iconsize
end

begin chessboard
	key "box", "Chessboard Pattern"
	color "black"
	repeaticon "0xaa55aa55aa55aa55", 5
end

begin walltiling
	key "box", "Wall Tiling"
	color "navy"
	repeaticon "0xf888a888f8000000", 5
end

begin trellistiling
	key "box", "Trellis Tiling"
	color "black"
	repeaticon "0xfcfcc4c4c4fc0000", 4
end

begin dotpattern
	key "box", "Dot Pattern"
	color "crimson"
	repeaticon "0xaa00aa00aa00aa00", 6
end

begin halftone
	key "box", "Halftone"
	color "black"
	repeaticon "0x56a9a659659a6a95", 5
end

begin stipple
	key "box", "Stipple"
	color "blue"
	repeaticon "0xaa44aa00aa44aa00", 5
end

begin weavefill_box
	move -2, 0
	draw 0, 2
	color "black"
	linestyle 1
	stroke

	clearpath
	color "white"
	linestyle 2
	move -0.5, 0.5
	draw -1.5, 1.5
	stroke

	clearpath
	color "black"
	linestyle 1
	move -2, 2
	draw 2, -2
	stroke

	clearpath
	color "white"
	linestyle 2
	move 0.5, -1.5
	draw 1.5, -0.5
	stroke

	clearpath
	color "black"
	linestyle 1
	move 0, -2
	draw 2, 0
	stroke
end

begin weavefill
	key "box", "Weave Fill"
	color "white"
	fill
	clip "inside"
	stripepath 4, 0
	samplepath 4, 0
	weavefill_box
end

begin aggregate_triangle
	# Draw a triangle at a random angle at a random position.
	#
	move random(4) - 2, random(4) - 2
	rotate random(360)
	triangle1
end

begin aggregate
	key "box", "Aggregate"
	linestyle 0.1
	color "slateblue"
	stroke
	clip "inside"
	stripepath 4, 0
	samplepath 4, 0
	aggregate_triangle
end

print 'timer=', Mapyrus.timer

if 1 #allSymbolsLegend = 1
then
	move 0, 0
	circle1
	triangle1
	square1
	pentagon1
	octagon1
	hexagon1
	x1
	plus1
	shipwreck
	lighthouse
	trigstation
	newmoon
	oldmoon
	trafficlights ""
	speechbubble ""
	northarrow
	nsew
	viewpoint
	sbahn
	ubahn
	tree
	hospital
	radiotower
	parking
	tent
	cemetary
	hut
	church
	bordercrossing
	information
	library
	school
	fairground
	postoffice
	police
	waypoint
	coveredparking
	cave
	flag
	pennant
	factory
	capitalcity "Ely"
	city "Ely"
	town "Ely"
	emphasisedname "Ely"

	hatch1
	hatch2
	hatch3
	hatch4
	crosshatch
	mesh
	doublestripefill
	triplestripefill
	chessboard
	walltiling
	trellistiling
	dotpattern
	halftone
	stipple
	halffill
	quiltfill
	circlefill
	boxfill
	weavefill
	aggregate

	newpage "eps", "allsymbols.eps", 210, 297
	#newpage "png", "allsymbols.png", 210, 297
	color "white"
	box 0, 0, Mapyrus.page.width, Mapyrus.page.height
	fill
	color "black"
	font "Helvetica", 3
	let x = 10, y = Mapyrus.page.height - 10
	while Mapyrus.key.count > 0
	do
		clearpath
		move x, y
		legend 8
		let y = y - 10
		if y < 10
		then
			let x = x + 50
			let y = Mapyrus.page.height - 10
		endif
	done
endif


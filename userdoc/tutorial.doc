include header.doc
<!-- @(#) $Id$ -->

<h2>
Tutorial
</h2>

<p>

<table>

<tr>
<td>
<a href="#first"/>First Steps</a>
</td>
</tr>

<tr>
<td>
<a href="#var"/>Using Variables</a>
</td>
</tr>

<tr>
<td>
<a href="#procedures"/>Building Procedures</a>
</td>
</tr>

<tr>
<td>
<a href="#lines"/>Displaying Lines</a>
</td>
</tr>

<tr>
<td>
<a href="#polygons"/>Displaying Polygons</a>
</td>
</tr>

<tr>
<td>
<a href="#labels"/>Displaying Labels</a>
</td>
</tr>

<tr>
<td>
<a href="#rand"/>Random Effects</a>
</td>
</tr>

<tr>
<td>
<a href="#datasets"/>Displaying Geographic Information System Datasets</a>
</td>
</tr>

<tr>
<td>
<a href="#scalebar"/>Displaying A Scalebar</a>
</td>
</tr>

<tr>
<td>
<a href="#pdf"/>Generating Portable Document Format (PDF) Output</a>
</td>
</tr>

<tr>
<td>
<a href="#httpserver"/>Setting Up Mapyrus As An HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#url"/>Passing Variables To Mapyrus HTTP Server Through URLs</a>
</td>
</tr>

<tr>
<td>
<a href="#htmlpage"/>Returning HTML Pages From Mapyrus HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#htmladd"/>Returning Additional Information From Mapyrus HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#imagemap"/>Using Imagemaps With Mapyrus HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#combining"/>Combining Mapyrus With Other Software</a>
</td>
</tr>

</table>

include hr.doc

<a name="first"></a>
<h3>First Steps</h3>

Enter the following lines into a text file named <tt>first.txt</tt>.

include beginex.doc
include tutorialfirst1.mpy
include endex.doc

Each line in the file is a command for Mapyrus.  The
first line sets output to a
30mm square PNG format image named
<tt>tutorialfirst1.png</tt>
with the
<a href="reference.html#newpage">newpage</a> command.
The second and third lines set the color for drawing to black,
with lines drawn 4 millimetres wide with rounded ends and corners.
The fourth and fifth lines define a path on the page giving
coordinates in millimetres.
The sixth line is a
<a href="reference.html#stroke">stroke</a> command to draw the
path just defined onto the page using the current color and
line style.

<p>
Open a terminal window and enter the following command:

<pre>
java -jar <i>install-path</i>/mapyrus.jar first.txt
</pre>

where <i>install-path</i> is the directory in which Mapyrus is installed.
When Mapyrus reaches the end of the file <tt>first.txt</tt>,
the output file <tt>tutorialfirst1.png</tt> is completed and Mapyrus exits.
When the output file is then viewed in a web browser, the following
image is shown.

<p>
<img src="tutorialfirst1.png">
<p>

Change the file <tt>first.txt</tt> to contain the following lines.

include beginex.doc
include tutorialfirst2.mpy
include endex.doc

In this example, color is set as a hex value instead of a name and
the <a href="reference.html#fill">fill</a> command is used to
flood fill the path that has been defined.
The characters on lines following a hash (<tt>#</tt>) character that
is not inside a quoted string are ignored by Mapyrus.
The output file
<tt>tutorialfirst2.png</tt> contains the following image.

<p>
<img src="tutorialfirst2.png">
<p>

Change the file <tt>first.txt</tt> to contain the following lines.

include beginex.doc
include tutorialfirst3.mpy
include endex.doc

This example shows how to draw circular arcs,
giving the center point and end point and
yet another way of defining color.
After being filled, the path remains and is used again to draw the outline
of the same shape.
To clear the path before drawing another shape the
<a href="reference.html#clearpath">clearpath</a>
command is used.
The second shape contains an island (or hole).  When a shape is
self-intersecting or contains islands, the winding rule is
used for determining which areas get filled.

<p>
<img src="tutorialfirst3.png">

include hr.doc

<a name="var"></a>
<h3>Using Variables</h3>

Use variables and conditional tests to vary the appearance
of the display.
Use loops to display similar symbols repeatedly.
Variables named <tt>x</tt> and <tt>counter</tt> are used in the
following example.  The variable
<tt>Mapyrus.page.width</tt>
is set by Mapyrus automatically.

include beginex.doc
include tutorialvar1.mpy
include endex.doc

The output of this example is.

<p>
<img src="tutorialvar1.png">
<p>

include hr.doc

<a name="procedures"/></a>
<h3>Building Procedures</h3>
<p>

Store frequently used sequences of commands in a procedure.
A procedure has a unique name, takes a fixed number of arguments and
may be called from any place where a command is expected.
<p>
Private variables in a procedure are defined with the 
<a href="reference.html#local">local</a>
command.
<p>
When a procedure is called, the
<a href="reference.html#gstate">graphics state</a>
is saved, the commands for the procedure are executed and then the
graphics state is restored before returning.

The following example shows a simple procedure named <tt>trail</tt>
and its output.

include beginex.doc
include tutorialprocedures1.mpy
include endex.doc

<p>
<img src="tutorialprocedures1.png">
<p>

If the current path contains only points added with
<a href="reference.html#move">move</a>
commands when a procedure is called, then the
procedure is called once for each point with the origin
moved to that point.  This permits several symbols to be drawn
easily and is demonstrated in the following example.

include beginex.doc
include tutorialprocedures2.mpy
include endex.doc

<p>
<img src="tutorialprocedures2.png">
<p>

Put frequently used procedures in a separate file and use an
<a href="reference.html#language">include</a>
line to include it in other files.  When this is done for the
previous example, the file is split in the following way.

include beginex.doc
include tutorialprocedures3.mpy
include endex.doc

include beginex.doc
include tutorialprocedures4.mpy
include endex.doc

include hr.doc

<a name="lines"/></a>
<h3>Displaying Lines</h3>
<p>
Solid and dashed line styles are set with the
<a href="reference.html#linestyle">linestyle</a>
command.  To draw a line with repeated symbols, use the
<a href="reference.html#samplepath">samplepath</a>
command to replace the path with evenly spaced sample points and
then call a procedure to draw a symbol at each sample point.
The following example demonstrates this.

include beginex.doc
include tutoriallines1.mpy
include endex.doc

<p>
<img src="tutoriallines1.png">
<p>

The next example demonstrates
combining solid and dashed linestyles.
For best results display all lines with a solid linestyle,
then display all lines again with a dashed linestyle.

include beginex.doc
include tutoriallines2.mpy
include endex.doc

<p>
<img src="tutoriallines2.png">
<p>

The following example demonstrates combining thick and
thin linestyles and symbols at sampled points.
For best results display all lines with a thick linestyle,
then display all lines again with a thin linestyle.

include beginex.doc
include tutoriallines3.mpy
include endex.doc

<p>
<img src="tutoriallines3.png">
<p>

The following examples demonstrate creating sample points
from the path to generate further line styles.

include beginex.doc
include tutoriallines4.mpy
include endex.doc

<p>
<img src="tutoriallines4.png">
<p>

include beginex.doc
include tutoriallines5.mpy
include endex.doc

<p>
<img src="tutoriallines5.png">
<p>

include hr.doc

<a name="polygons"/></a>
<h3>Displaying Polygons</h3>
<p>
Polygon outlines are drawn with the
<a href="reference.html#stroke">stroke</a>
command and filled with the
<a href="reference.html#fill">fill</a>
command.
To draw repeated stripes (also known as hatching) through
the polygon, use the
<a href="reference.html#clip">clip</a>
command to limit the area displayed to inside the polygon,
then the
<a href="reference.html#stripepath">stripepath</a>
command to replace the path with evenly spaced stripes and
then draw each line.  The following example demonstrates this.

include beginex.doc
include tutorialpolygons1.mpy
include endex.doc

<p>
<img src="tutorialpolygons1.png">
<p>

To fill a polygon with cross-hatching use procedures to
draw each set of hatch lines at different angles.  Two procedures
are used so that modifying the current path with the
<a href="reference.html#stripepath">stripepath</a>
command is isolated and the original path remains unmodified in
the calling procedure.
This is demonstrated in the following example.

include beginex.doc
include tutorialpolygons2.mpy
include endex.doc

<p>
<img src="tutorialpolygons2.png">
<p>

Use the
<a href="reference.html#stripepath">stripepath</a>
and
<a href="reference.html#samplepath">samplepath</a>
commands in combination to generate a grid of points through the
polygon, then call a procedure to draw a symbol at each point.
This is demonstrated in the following example.

include beginex.doc
include tutorialpolygons3.mpy
include endex.doc

<p>
<img src="tutorialpolygons3.png">
<p>

To display a border around the inside of the polygon
use the
<a href="reference.html#clip">clip</a>
command to limit the area displayed to inside the polygon
and then draw the outline with a thick linestyle.
The following example demonstrates this.
Use the
<a href="reference.html#protect">protect</a>
command instead of
<a href="reference.html#clip">clip</a>
to display a border around the outside of the polygon.

include beginex.doc
include tutorialpolygons4.mpy
include endex.doc

<p>
<img src="tutorialpolygons4.png">
<p>

include hr.doc

<a name="labels"/></a>
<h3>Displaying Labels</h3>
<p>

Labels are displayed using the
<a href="reference.html#move">move</a>
command to define one or more points for labelling, followed by a
<a href="reference.html#label">label</a>
command.  The font and justification for labels
are set with the
<a href="reference.html#font">font</a>
and
<a href="reference.html#justify">justify</a>
commands.
Setting fonts, justification and displaying multiple lines
are demonstrated in the following example.

include beginex.doc
include tutoriallabels1.mpy
include endex.doc

<p>
<img src="tutoriallabels1.png">
<p>

Labels are displayed horizontally.  Rotate
the axes with the
<a href="reference.html#rotate">rotate</a>
command before setting the font to display labels at an angle.
Drawing labels one pixel offset from original position
and in a different color highlights the label.
These two techniques are demonstrated in the following
example.

include beginex.doc
include tutoriallabels2.mpy
include endex.doc

<p>
<img src="tutoriallabels2.png">
<p>

include hr.doc

<a name="rand"/></a>
<h3>Random Effects</h3>
<p>
Random effects are generated using the
<a href="reference.html#random">random</a>
function and help give a less mechanical appearance.
The following example demonstrates setting
size and color randomly.

include beginex.doc
include tutorialrand1.mpy
include endex.doc

<img src="tutorialrand1.png">
<p>

The next example demonstrates setting rotation randomly.

include beginex.doc
include tutorialrand2.mpy
include endex.doc

<img src="tutorialrand2.png">
<p>

This example demonstrates setting position randomly for
polygon fill.

include beginex.doc
include tutorialrand3.mpy
include endex.doc

<img src="tutorialrand3.png">
<p>

include hr.doc

<a name="datasets"></a>
<h3>Displaying Geographic Information System Datasets</h3>
<p>
// TODO explain worlds command Mercator, transformation, etc.
Mapyrus reads geographic data and associated relational attributes
from geographic information system (GIS) datasets.  The simplest
source of data is a text file, with one record per line.
The name and type of dataset to read is given in a
<a href="reference.html#dataset">dataset</a>
command.
An
<a href="reference.html#import">import</a>
command is used to begin reading from the dataset.
Each record is retrieved with a
<a href="reference.html#fetch">fetch</a>
command in a loop and a variable is assigned for each field in the record.
For a text file, fields are assigned to variables
<tt>$1</tt>, <tt>$2</tt>, <tt>$3</tt>, ...
and the whole record is assigned to variable
<tt>$0</tt>.
<p>
The following example demonstrates reading a text file
and displaying the geographic data that it contains.

include beginex.doc
include tutorialdatasets1.txt
include endex.doc

include beginex.doc
include tutorialdatasets1.mpy
include endex.doc

<img src="tutorialdatasets1.png">
<p>
Export files of 
GIS datasets are also read as text files.  A loop
and counter are used to read all coordinates making up
lines and polygons.
The following example demonstrates reading and displaying a
<a href="www.genaware.com">GenaMap</a> format export file
containing line features.

include beginex.doc
include streets.EE
include endex.doc

include beginex.doc
include tutorialdatasets2.mpy
include endex.doc

<img src="tutorialdatasets2.png">
<p>

Reading data from an ESRI Shape file format is similar to reading a text file.
A Shape file defines a bounding rectangle so the
<a href="reference.html#internalvars">variables</a>
<tt>Mapyrus.dataset.min.x</tt>,
<tt>Mapyrus.dataset.min.y</tt>,
<tt>Mapyrus.dataset.max.x</tt>,
and
<tt>Mapyrus.dataset.max.y</tt>
are used to set world coordinates to the bounding rectangle of the dataset.
<p>
An ESRI Shape file also defines field names.  Fields
fetched with the
<a href="reference.html#fetch">fetch</a>
command are assigned to these variable names.  The
geometry for each record is assigned to a variable named
<tt>GEOMETRY</tt> and is added to the current path with the
<a href="reference.html#addpath">addpath</a>
command.
<p>
The following example demonstrates reading an ESRI Shape file
containing attribute fields named HOTELNAME and STARRATING.

include beginex.doc
include tutorialdatasets3.mpy
include endex.doc

<img src="tutorialdatasets3.png">
<p>

Check the
<a href="reference.html#internalvars"/>
internal variable
</a>
<tt>Mapyrus.worlds.scale</tt>
before displaying a large, detailed dataset.  If the scale is too high
then the details will not be legible so skip display of the detailed
part of the dataset.
For example, display all streets when zoomed in,
but only highways when zoomed out.

include hr.doc

<a name="scalebar"></a>
<h3>Displaying A Scalebar</h3>
<p>
A cartographic rule is that a map display must include a scalebar.
The following example demonstrates generates two images using the
<a href="reference.html#internalvars"/>
internal variable
</a>
<tt>Mapyrus.worlds.scale</tt>
to add a scale bar to the lower-left corner of a map display.
An alternative approach is to save the scale value in a variable, use the
<a href="reference.html#newpage">newpage</a> command to
create a new image file
and display the scalebar in a separate image file from the map.

include beginex.doc
include tutorialscalebar1.mpy
include endex.doc

<img src="tutorialscalebar1.png">
&nbsp;
<img src="tutorialscalebar2.png">
<p>

include hr.doc

<a name="pdf"></a>
<h3>Generating Portable Document Format (PDF) Output</h3>
<p>

Portable Document Format (PDF) files are created by converting
PostScript output from Mapyrus to PDF using the <tt>ps2pdf</tt>
utility program, part of GhostScript.
<p>
The pipe option of the
<a href="reference.html#newpage">newpage</a> command
is used to pipe PostScript output from Mapyrus through <tt>ps2pdf</tt>
and into a PDF file.  For example,

include beginex.doc
newpage "ps", "| ps2pdf - myfile.pdf", 210, 297, 300
include endex.doc

include hr.doc

<a name="httpserver"></a>
<h3>Setting Up Mapyrus As An HTTP Server</h3>
<p>

Enter the following lines into a text file named
<tt>tutorialhttpserver1.mpy</tt>, replacing the filename
<tt>/tmp/roads.shp</tt>
with the filename of an available ESRI Shape file containing
lines or polygons.

include beginex.doc
include tutorialhttpserver1.mpy
include endex.doc

In a terminal window, change to the directory containing the
file
<tt>tutorialhttpserver1.mpy</tt>, and start
Mapyrus as an HTTP server on port 8410 with
the following command.

include beginex.doc
java -jar <i>install-path</i>/mapyrus.jar -s 8410
include endex.doc

where <i>install-path</i> is the directory in which Mapyrus is installed.
Then enter the following URL in a web browser.  Mapyrus
receives the request, executes the commands in the file
<tt>tutorialhttpserver1.mpy</tt> and returns the
PNG image that is written to standard output to the web browser.

<pre>
http://localhost:8410/tutorialhttpserver1.mpy
</pre>

include hr.doc

<a name="url"></a>
<h3>Passing Variables To Mapyrus HTTP Server Through URLs</h3>
<p>

To vary the display that is created by the Mapyrus HTTP Server, include
variables in the URL.  For example,

<pre>
http://localhost:8410/tutorialurl.mpy?x1=11&y1=48&x2=12&y2=49&labels=off
</pre>

The variables <tt>x1</tt>, <tt>y1</tt>, <tt>x2</tt>, <tt>y2</tt>
and <tt>labels</tt> are automatically set in Mapyrus with the values
passed in the URL before interpreting
the commands in the file <tt>tutorialurl.mpy</tt>.
<p>

For applications that manage state
and provide a graphical user interface (such as clients written in
Java or Visual Basic), use this method for returning data to the
application.

include hr.doc

<a name="htmlpage"></a>
<h3>Returning HTML Pages From Mapyrus HTTP Server</h3>
<p>

An application for web browsers is based on HTML pages.
Generate HTML in Mapyrus and return it with
<a href="reference.html#print"/>
print
</a>
commands.
Generate temporary images for the HTML page with
unique filenames using the
<a href="reference.html#tempname"/>
<tt>tempname</tt>
</a>
function and return references to the images in the HTML.
<p>

The following example demonstrates this, displaying ESRI Shape files
<tt>/tmp/rds_l.shp</tt>
and
<tt>/tmp/txt_p.shp</tt>
and using an HTML form to allow
the user to change the map display.
Enter the following lines into a text file named
<tt>tutorialhtmlpage1.mpy</tt>.

include beginex.doc
include tutorialhtmlpage1.mpy
include endex.doc

Start Mapyrus with the
<a href="#httpserver"/>
HTTP Server
</a>
option and enter the following URL in a web browser.

<pre>
http://localhost:8410/tutorialhtmlpage1.mpy
</pre>

To simplify editing of HTML pages for an application, setup
template HTML pages with placeholders for the information that
Mapyrus provides.  Return the HTML pages with the placeholders
replaced by real values using the
<a href="reference.html#replace"/>
<tt>replace</tt>
</a>
function.  The following
<a href="tutorialhtmlpage2.txt">
template HTML file
</a>
and Mapyrus commands demonstrate this.

include beginex.doc
include tutorialhtmlpage2.mpy
include endex.doc

include hr.doc

<a name="imagemap"></a>
<h3>Using Imagemaps With Mapyrus HTTP Server</h3>
<p>

When Mapyrus receives a URL requested by the user
clicking on an HTML imagemap, the
<a href="reference.html#internalvars"/>
internal variables
</a>
<tt>Mapyrus.imagemap.x</tt> and
<tt>Mapyrus.imagemap.y</tt> are automatically set with the pixel position
clicked in the image (with origin in top-left corner of the image).
Use these variables to re-center, or zoom the display to the
point clicked in the imagemap.
<p>
The following example demonstrates
using these variables to generate a new image, based on the
position clicked in the imagemap.

include beginex.doc
include tutorialimagemap1.mpy
include endex.doc

include hr.doc

<a name="combining"></a>
<h3>Combining Mapyrus With Other Software</h3>
<p>

To combine Mapyrus with other software use the following
techniques.
<p>
Pass parameters from calling environment to Mapyrus using the Java -D option.
<p>
To use Mapyrus in a pipeline of commands,
give <tt>-</tt> as output file in the
<a href="reference.html#newpage">newpage</a>
command to write image to standard output.
<p>
Use Mapyrus in combination with the freely available software
<a href="http://netpbm.sourceforge.net">Netpbm</a>
and
<a href="http://www.ghostscript.com">Ghostscript</a>
to post-process image output and convert images and PostScript
output to other formats.
<p>
The following examples demonstrate these methods.

include beginex.doc
java -DDATADIR=$DATADIR -DNameidx=Q7B80L -jar mapyrus.jar mycommands.txt | pngtopnm | ppmtopgm | pgmtopbm | pbmtoascii -2x4
include endex.doc

include beginex.doc
java -jar mapyrus.jar $HOME/common.txt mycommands.txt > myfile.ps
gs -sDEVICE=faxg3 -sOutputFile=myfile.fax -TextAlphaBits=4 myfile.ps
include endex.doc

A Java Virtual Machine takes more than one second to start on many computers.
For applications that must start Mapyrus many times to perform short tasks,
start Mapyrus as an HTTP server and make HTTP requests instead so that
startup time is eliminated.
Most languages include method of making HTTP requests.
From Perl use the
<a href="http://www.cpan.org">libwww-perl</a> modules.
From Java use the
<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/net/HttpURLConnection.html">java.net.HttpURLConnection</a>
class.
Use <a href="http://www.lynx.browser.org">lynx</a>
or
<a href="http://w3m.sourceforge.net/">w3m</a>
from
languages without the ability to make HTTP requests.
For example,

include beginex.doc
lynx -dump http://localhost:8410/wsrv.mpy?landkreis=Erding&zoomlevel=3 > myfile.png
include endex.doc

include footer.doc


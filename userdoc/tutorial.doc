include header.doc
<!-- @(#) $Id$ -->

<h2>
Tutorial
</h2>

<p>

<table>

<tr>
<td>
<a href="#first"/>First Steps</a>
</td>
</tr>

<tr>
<td>
<a href="#var"/>Using Variables</a>
</td>
</tr>

<tr>
<td>
<a href="#procedures"/>Building Procedures</a>
</td>
</tr>

<tr>
<td>
<a href="#lines"/>Displaying Lines</a>
</td>
</tr>

<tr>
<td>
<a href="#polygons"/>Displaying Polygons</a>
</td>
</tr>

<tr>
<td>
<a href="#labels"/>Displaying Labels</a>
</td>
</tr>

<tr>
<td>
<a href="#rand"/>Random Effects</a>
</td>
</tr>

<tr>
<td>
<a href="#pdf"/>Generating Portable Document Format (PDF) output</a>
</td>
</tr>

<tr>
<td>
<a href="#httpserver"/>Setting up Mapyrus as an HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#url"/>Passing Variables to Mapyrus HTTP Server Through URLs</a>
</td>
</tr>

<tr>
<td>
<a href="#htmlpage"/>Returning HTML Pages from Mapyrus HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#htmladd"/>Returning Additional Information from Mapyrus HTTP Server</a>
</td>
</tr>

<tr>
<td>
<a href="#imagemap"/>Using Imagemaps with Mapyrus HTTP Server</a>
</td>
</tr>

</table>

include hr.doc

<a name="first"></a>
<h3>First Steps</h3>

Enter the following lines into a text file named <tt>first.txt</tt>.

include beginex.doc
include tutorialfirst1.mpy
include endex.doc

Each line in the file is a command for Mapyrus.  The
first line sets output to a
PNG format image named
<tt>tutorialfirst1.png</tt>
with the
<a href="reference.html#newpage">newpage</a> command.
The second and third lines set the color for drawing to black,
with lines drawn 4 millimetres wide with rounded ends and corners.
The fourth and fifth lines define a path on the page giving
coordinates in millimetres.
The sixth line is a
<a href="reference.html#stroke">stroke</a> command to draw the
path just defined onto the page using the current color and
line style.

<p>
Open a terminal window and enter the following command:

<pre>
java -jar mapyrus.jar first.txt
</pre>

When Mapyrus reaches the end of the file <tt>first.txt</tt>,
the output file <tt>tutorialfirst1.png</tt> is completed and Mapyrus exits.
When the output file is then viewed in a web browser, the following
image is shown.

<p>
<img src="tutorialfirst1.png">
<p>

Change the file <tt>first.txt</tt> to contain the following lines.

include beginex.doc
include tutorialfirst2.mpy
include endex.doc

In this example, color is set as a hex value instead of a name and
the <a href="reference.html#fill">fill</a> command is used to
flood fill the path that has been defined.  The output file
<tt>tutorialfirst2.png</tt> contains the following image.

<p>
<img src="tutorialfirst2.png">
<p>

Change the file <tt>first.txt</tt> to contain the following lines.

include beginex.doc
include tutorialfirst3.mpy
include endex.doc

This example shows how to draw circular arcs,
giving the center point and end point and
yet another way of defining color.

<p>
<img src="tutorialfirst3.png">

include beginex.doc
include tutorialfirst4.mpy
include endex.doc


define page
basic shapes in different colours

<a name="var"></a>
<h3>Using Variables</h3>

Use variables and conditional tests to vary the appearance
of the display.
Use loops to display similar symbols repeatedly.
Variables named <tt>x</tt> and <tt>counter</tt> are used in the
following example.  The variable
<tt>Mapyrus.page.width</tt>
is set by Mapyrus automatically.

include beginex.doc
include tutorialvar1.mpy
include endex.doc

The output of this example is.

<p>
<img src="tutorialvar1.png">
<p>

<a name="procedures"/></a>
<h3>Building Procedures</h3>
<p>


<a name="rand"/></a>
<h3>Random Effects</h3>
<p>
Random effects are created using the
<a href="reference.html#random">random</a>
function.
The following example demonstrates setting
size and color randomly.

include beginex.doc
include tutorialrand1.mpy
include endex.doc

<img src="tutorialrand1.png">
<p>

The next example demonstrates setting rotation randomly.

include beginex.doc
include tutorialrand2.mpy
include endex.doc

<img src="tutorialrand2.png">
<p>

This example demonstrates setting position randomly for
polygon fill.

include beginex.doc
include tutorialrand3.mpy
include endex.doc

<img src="tutorialrand3.png">
<p>


<a name="pdf"></a>
<h3>Generating Portable Document Format (PDF) output</h3>
<p>

Portable Document Format (PDF) files are created by converting
PostScript output from Mapyrus to PDF using the <tt>ps2pdf</tt>
utility program, part of GhostScript.
<p>
The pipe option of the
<a href="reference.html#newpage">newpage</a> command
is used to pipe PostScript output from Mapyrus through <tt>ps2pdf</tt>
and into a PDF file.  For example,

include beginex.doc
newpage "ps", "| ps2pdf - myfile.pdf", 210, 297, 300
include endex.doc

<p>
<a name="httpserver"></a>
<h3>Setting up Mapyrus as an HTTP Server</h3>
<p>

Enter the following lines into a text file named
<tt>tutorialhttpserver1.mpy</tt>, replacing the filename
<tt>/tmp/roads.shp</tt>
with the filename of an available ESRI Shape file.

include beginex.doc
include tutorialhttpserver1.mpy
include endex.doc

In a terminal window, change to the directory containing the
file
<tt>tutorialhttpserver1.mpy</tt>, and start
Mapyrus as an HTTP server on port 8410 with
the following command.

include beginex.doc
java -jar mapyrus.jar -httpserver 8410
include endex.doc

Then enter the following URL in a web browser.  Mapyrus
receives the request, executes the commands in the file
<tt>tutorialhttpserver.mpy</tt> and returns the PNG file
that is created to the web browser.

<pre>
http://localhost:8410/tutorialhttpserver.mpy
</pre>

<p>
<a name="url"></a>
<h3>Passing Variables to Mapyrus HTTP Server Through URLs</h3>
<p>

To vary the display that is created by the Mapyrus HTTP Server, include
variables in the URL.  For example,

<pre>
http://localhost:8410/tutorialurl.mpy?x1=11&y1=48&x2=12&y2=49&labels=off
</pre>

The variables <tt>x1</tt>, <tt>y1</tt>, <tt>x2</tt>, <tt>y2</tt>
and <tt>labels</tt> are automatically set before interpreting
the commands in the file <tt>tutorialurl.mpy</tt>.
<p>

This method is suitable for applications that manage state
in the HTTP client, such as clients written in Java or Visual Basic.

<p>
<a name="htmlpage"></a>
<h3>Returning HTML Pages from Mapyrus HTTP Server</h3>
<p>

An application for web browsers is based on HTML pages.
Generate HTML in Mapyrus and return it with
<a href="reference.html#print"/>
print
</a>
commands.
Generate images to include in the HTML page with unique filenames using the
<a href="reference.html#tempname"/>
<tt>tempname</tt>
</a>
function.  The following simplistic example demonstrates this.

include beginex.doc
include tutorialhtmlpage1.mpy
include endex.doc

To simplify editing of HTML pages for the application, setup
template HTML pages with placeholders for the information that
Mapyrus provides.  Return the HTML pages with the placeholders
replaced by real values using the
<a href="reference.html#replace"/>
<tt>replace</tt>
</a>
function.  The following
<a href="tutorialhtmlpage2.txt">
template HTML file
</a>
and Mapyrus commands demonstrate this.

include beginex.doc
include tutorialhtmlpage2.mpy
include endex.doc

<p>
<a name="imagemap"></a>
<h3>Using Imagemaps with Mapyrus HTTP Server</h3>
<p>

When Mapyrus receives a URL requested by the user
clicking on an HTML imagemap, the
<a href="reference.html#internalvars"/>
internal variables
</a>
<tt>Mapyrus.imagemap.x</tt> and
<tt>Mapyrus.imagemap.y</tt> are automatically set with the pixel position
clicked in the image (with origin in top-left corner of the image).
Use these variables to recenter, or zoom the display to the
point clicked in the imagemap.
<p>
The following example demonstrates
using these variables to generate a new image, based on the
position clicked in the imagemap.

include beginex.doc
include tutorialimagemap1.mpy
include endex.doc

include footer.doc

